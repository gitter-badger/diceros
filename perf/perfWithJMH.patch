diff --git a/pom.xml b/pom.xml
index 76a3497..af158fb 100644
--- a/pom.xml
+++ b/pom.xml
@@ -66,6 +66,16 @@
             <version>3.3</version>
             <scope>compile</scope>
         </dependency>
+        <dependency>
+            <groupId>org.openjdk.jmh</groupId>
+            <artifactId>jmh-core</artifactId>
+            <version>0.8</version>
+        </dependency>
+        <dependency>
+            <groupId>org.openjdk.jmh</groupId>
+            <artifactId>jmh-generator-annprocess</artifactId>
+            <version>0.8</version>
+        </dependency>
     </dependencies>
 
     <build>
@@ -82,6 +92,27 @@
             </plugin>
 
             <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-shade-plugin</artifactId>
+                <version>2.0</version>
+                <executions>
+                    <execution>
+                        <phase>package</phase>
+                        <goals>
+                            <goal>shade</goal>
+                        </goals>
+                        <configuration>
+                            <finalName>microbenchmarks</finalName>
+                            <transformers>
+                                <transformer implementation="org.apache.maven.plugins.shade.resource.ManifestResourceTransformer">
+                                    <mainClass>org.openjdk.jmh.Main</mainClass>
+                                </transformer>
+                            </transformers>
+                        </configuration>
+                    </execution>
+                </executions>
+            </plugin>
+            <plugin>
                 <groupId>org.codehaus.mojo</groupId>
                 <artifactId>build-helper-maven-plugin</artifactId>
                 <version>1.9</version>
diff --git a/src/main/java/com/intel/diceros/perf/AESPerfTestWithJMH.java b/src/main/java/com/intel/diceros/perf/AESPerfTestWithJMH.java
new file mode 100644
index 0000000..2a5a7e9
--- /dev/null
+++ b/src/main/java/com/intel/diceros/perf/AESPerfTestWithJMH.java
@@ -0,0 +1,251 @@
+/**
+ * Licensed to the Apache Software Foundation (ASF) under one
+ * or more contributor license agreements.  See the NOTICE file
+ * distributed with this work for additional information
+ * regarding copyright ownership.  The ASF licenses this file
+ * to you under the Apache License, Version 2.0 (the
+ * "License"); you may not use this file except in compliance
+ * with the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.intel.diceros.perf;
+
+import java.nio.ByteBuffer;
+import java.security.SecureRandom;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Map;
+import javax.crypto.BadPaddingException;
+import javax.crypto.Cipher;
+import javax.crypto.IllegalBlockSizeException;
+import javax.crypto.ShortBufferException;
+import javax.crypto.spec.IvParameterSpec;
+import javax.crypto.spec.GCMParameterSpec;
+import java.security.spec.AlgorithmParameterSpec;
+import javax.crypto.spec.SecretKeySpec;
+
+import org.openjdk.jmh.annotations.GenerateMicroBenchmark;
+import org.openjdk.jmh.annotations.Param;
+import org.openjdk.jmh.annotations.Scope;
+import org.openjdk.jmh.annotations.Setup;
+import org.openjdk.jmh.annotations.State;
+
+/*
+ *
+ * JMH is a Java harness for building, running, and analysing nano/micro/milli/macro
+ * benchmarks written in Java and other languages targetting the JVM.
+ * http://openjdk.java.net/projects/code-tools/jmh/
+ *
+ * ============================== HOW TO RUN THIS TEST: ====================================
+ * You can run this test with:
+ *
+ *
+ */
+
+@State(Scope.Benchmark)
+public class AESPerfTestWithJMH {
+  private static final SecureRandom rand = new SecureRandom();
+  private static String[] SUN_JCE_MODES =
+      {"AES/CTR/NoPadding", "AES/CBC/NoPadding", "AES/CBC/PKCS5Padding", "AES/GCM/NoPadding"};
+  private static String[] DICEROS_MODES =
+      {"AES/CTR/NoPadding", "AES/CBC/NoPadding", "AES/CBC/PKCS5Padding", "AES/MBCBC/PKCS5Padding",
+       "AES/XTS/NoPadding", "AES/GCM/NoPadding"};
+  private static Map<String, String[]> providerModes =
+      new HashMap<String, String[]>();
+
+  static {
+    providerModes.put("SunJCE", SUN_JCE_MODES);
+    providerModes.put("DC", DICEROS_MODES);
+  }
+
+  /*command line parameter set
+   *
+   * usage: -p buffer_size=xxx(default 128)
+   *        -p sizeUnit=xx(default KB)
+   *        -p provider=xxx(default SunJCE)
+   *        -p mode=xxx(default AES/CTR/NoPadding)
+   *        -p directBuffer=xxx(default false)
+   */
+
+  @Param(value = "128")
+  public int buffer_size;
+  @Param(value = "KB")
+  public String sizeUnit;
+  @Param(value = "SunJCE")
+  public String provider;
+  @Param(value = "AES/CTR/NoPadding")
+  public String mode;
+  @Param(value = "false")
+  public boolean directBuffer = false;
+
+  //byteArray encryption/decryption
+  private byte[] inputByteArray;
+  private byte[] encByteArray;
+  private byte[] tmpByteArray;
+      //byteArray for first encrypt and then used for decryption
+  private byte[] decByteArray;
+
+  //byteBuffer encryption/decryption
+  private ByteBuffer inputByteBuffer;
+  private ByteBuffer encByteBuffer;
+  private ByteBuffer tmpByteBuffer;
+//byteBuffer for first encrypt and then used for decryption
+  private ByteBuffer decByteBuffer;
+
+  private Cipher enc;
+  private Cipher dec;
+
+  /*
+   * 1.checkout the input argument. es: buffer_size, sizeUnit, provider and mode.
+   *   usage: -p privoder=DC -p buffer_size = 1024 -p sizeUnit=KB -p mode = AES/CTR/NoPadding
+   *
+   * 2.initialize the encryption and decryption cipher and alloc memory space for encrypt and decrypt result
+   *
+   */
+  @Setup
+  public void setup() throws Exception {
+    checkArgument();
+    System.out.println("Initialising test data : [INPUT_BUFFER_SIZE = " + String
+        .format("%d", buffer_size) + sizeUnit + "]");
+    initialize();
+  }
+
+  private void checkArgument() {
+    if (!providerModes.containsKey(provider)) {
+      throw new IllegalArgumentException(
+          "the provider parameter is not correct set. the value must be " + providerModes
+              .keySet());
+    }
+    if (!Arrays.asList(providerModes.get(provider)).contains(mode)) {
+      throw new IllegalArgumentException(
+          "the mode parameter is not correct set. the value must be " + Arrays
+              .asList(providerModes.get(provider)));
+    }
+    if (!sizeUnit.equals("KB") && !sizeUnit.equals("B")) {
+      throw new IllegalArgumentException("sizeUnit parameter must be KB or B");
+    }
+  }
+
+  private void initialize() throws Exception {
+    byte[] key;
+    byte[] iv;
+    //random generate the key and iv for cipher
+    key = new byte[32];
+    iv = new byte[16];
+    rand.nextBytes(key);
+    rand.nextBytes(iv);
+
+    //intialize for the test data
+    final int INPUT_BUFFER_SIZE =
+        (sizeUnit.equals("KB") ? 1024 * buffer_size : buffer_size);
+    inputByteArray = new byte[INPUT_BUFFER_SIZE];
+    rand.nextBytes(inputByteArray);
+
+    //calc the memory space for encryption/decryption according to the cipher mode
+    int encryptResultSize = INPUT_BUFFER_SIZE;
+    int decryptResultSize = INPUT_BUFFER_SIZE;
+    if (!mode.contains("NoPadding")) {
+      encryptResultSize = INPUT_BUFFER_SIZE + 16 - (INPUT_BUFFER_SIZE % 16) + 2;
+      decryptResultSize = INPUT_BUFFER_SIZE + 16 - (INPUT_BUFFER_SIZE % 16) + 2;
+    } else if (mode.contains("GCM")) {
+      encryptResultSize = INPUT_BUFFER_SIZE + 16;
+      decryptResultSize = INPUT_BUFFER_SIZE;
+    }
+
+    //initialize the cipher for encrypt or decrypt
+    try {
+      enc = Cipher.getInstance(this.mode, this.provider);
+      dec = Cipher.getInstance(this.mode, this.provider);
+      AlgorithmParameterSpec paramSpec;
+      if (mode.contains("GCM")) {
+        paramSpec = new GCMParameterSpec(128, iv);
+      } else {
+        paramSpec = new IvParameterSpec(iv);
+      }
+      enc.init(Cipher.ENCRYPT_MODE, new SecretKeySpec(key, "AES"),
+          paramSpec);
+      dec.init(Cipher.DECRYPT_MODE, new SecretKeySpec(key, "AES"),
+          paramSpec);
+    } catch (Exception e) {
+      throw new RuntimeException("AES failed initialisation - " + e.toString(),
+          e);
+    }
+
+    //check whether use ByteArray or ByteBuffer
+    if (directBuffer) {
+      inputByteBuffer = ByteBuffer.allocateDirect(INPUT_BUFFER_SIZE);
+      inputByteBuffer.put(inputByteArray);
+      inputByteBuffer.flip();
+      encByteBuffer = ByteBuffer.allocateDirect(encryptResultSize);
+      decByteBuffer = ByteBuffer.allocateDirect(decryptResultSize);
+      tmpByteBuffer = ByteBuffer.allocateDirect(encryptResultSize);
+
+      //encrypt the data for decrypt performance test
+      enc.doFinal(inputByteBuffer, tmpByteBuffer);
+      inputByteBuffer.flip();
+      tmpByteBuffer.flip();
+      tmpByteBuffer.limit(tmpByteBuffer.capacity());
+    } else {
+      encByteArray = new byte[encryptResultSize];
+      decByteArray = new byte[decryptResultSize];
+      tmpByteArray = new byte[encryptResultSize];
+
+      //encrypt the data for decrypt performance test
+      enc.doFinal(inputByteArray, 0, inputByteArray.length, tmpByteArray);
+    }
+
+    System.out.println("======");
+    System.out.println("Testing " + enc.getAlgorithm() + " " + enc
+        .getBlockSize() * 8 + " " + "provider:" + provider + " mode:" + mode + (
+        directBuffer ? " directBuffer" : " ByteArray"));
+  }
+
+  private void testCipher(Cipher cipher, byte[] input, byte[] output) throws
+      ShortBufferException, IllegalBlockSizeException, BadPaddingException {
+    cipher.doFinal(input, 0, input.length, output, 0);
+  }
+
+  private void testCipher(Cipher cipher, ByteBuffer input,
+                          ByteBuffer output) throws ShortBufferException,
+      IllegalBlockSizeException, BadPaddingException {
+    cipher.doFinal(input, output);
+  }
+
+  @GenerateMicroBenchmark
+  public void encryptPerfTest() throws Exception {
+    if (directBuffer) {
+      /*
+       * using bytebuffer need reset the input and output bytebuffer
+       */
+      testCipher(enc, inputByteBuffer, encByteBuffer);
+      inputByteBuffer.flip();
+      inputByteBuffer.limit(inputByteBuffer.capacity());
+      encByteBuffer.flip();
+      encByteBuffer.limit(encByteBuffer.capacity());
+    } else {
+
+      testCipher(enc, inputByteArray, encByteArray);
+    }
+  }
+
+  @GenerateMicroBenchmark
+  public void decryptPerfTest() throws Exception {
+    if (directBuffer) {
+      testCipher(dec, tmpByteBuffer, decByteBuffer);
+      tmpByteBuffer.flip();
+      tmpByteBuffer.limit(tmpByteBuffer.capacity());
+      decByteBuffer.flip();
+      decByteBuffer.limit(decByteBuffer.capacity());
+    } else {
+      testCipher(dec, tmpByteArray, decByteArray);
+    }
+  }
+}
